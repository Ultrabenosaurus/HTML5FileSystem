{"name":"HTML5FileSystem","body":"# FileSystem #\r\n\r\nA JavaScript object to make interacting with the HTML5 FileSystem API super-easy!\r\n\r\nTo use this library please either clone, [fork](https://github.com/Ultrabenosaurus/HTML5FileSystem/fork) or [download](https://github.com/Ultrabenosaurus/HTML5FileSystem/archive/master.zip) this repo.\r\n\r\n## Notes ##\r\n\r\nAll paths should be from root, not relative, unless a `dir` parameter is required in which case all other paths should be relative to `dir`. Also, all paths should be provided as strings, not DirectoryEntry objects.\r\n\r\nAny method that takes `success` and/or `failure` parameters requires these to be valid callbacks, as the underlying API methods return `void` and rely on callbacks themselves so no natural return is possible.\r\n\r\n*Commands marked with an asterisk are not meant to be called directly.\r\n\r\n## Commands ##\r\n\r\n### Implemented ###\r\n\r\n**Generic**\r\n\r\n* `filesystem.request(type, [size])` - request a FileSystem allocation\r\n* `filesystem.clear()` - deletes ALL files and directories in the FileSystem\r\n* `filesystem.init(fs)`* - set initial variables, read root directory\r\n* `filesystem.errorHandler(e)`* - process errors (default: send to console)\r\n\r\n**Directory**\r\n\r\n* `filesystem.directory.create(path)` - create a directory path recursively\r\n* `filesystem.directory.delete(path)` - recursively delete all files and directories along the path\r\n* `filesystem.directory.read(path, [success])` - read the given path\r\n* `filesystem.directory.empty(path)` - delete all files and directories in the given path\r\n* `filesystem.directory.copy(source, destination)` - copy a directory\r\n* `filesystem.directory.move(source, destination)` - move a directory\r\n* `filesystem.directory.rename(dir, old, new)` - rename a directory\r\n* `filesystem.directory.properties(path, success)` - get the metadata of a directory\r\n\r\n**File**\r\n\r\n* `filesystem.file.create(path)` - create a file, including its directory path\r\n* `filesystem.file.delete(path)` - delete the file specified by path\r\n* `filesystem.file.read(path, success)` - read a stored text file and return its contents\r\n* `filesystem.file.write(path, data, success, [append])` - write to a text file\r\n    * attempt to create file if it doesn't exist\r\n    * optional `append` parameter, set to `true` to append\r\n* `filesystem.file.copy(source, destination)` - copy a file\r\n* `filesystem.file.move(source, destination)` - move a file\r\n* `filesystem.file.rename(dir, old, new)` - rename a file\r\n* `filesystem.file.upload(name, dir, [success, [failure]])` - upload one or more local files to the FileSystem\r\n* `filesystem.file.download(path)` - force a file in the FileSystem to be downloaded (Chrome only)\r\n* `filesystem.file.properties(path, success)` - get the metadata of a file\r\n\r\n**URL**\r\n\r\n* `filesystem.url.get(path, success)` - get the URL of a file from a path\r\n* `filesystem.url.resolve(url, success)` - resolve the URL of a file into a path\r\n\r\n**Server**\r\n\r\n* `filesystem.server.upload(local, remote, [success, [failure]])` - upload a file from the FileSystem to your server\r\n* `filesystem.server.download(remote, local, [success, [failure]])` - download a file from your server to the FileSystem\r\n\r\n**Settings**\r\n\r\n* `filesystem.settings.setQuota(bytes)` - set a custom storage quota before making a request\r\n* `filesystem.settings.setMaxChunk(bytes)` - set a custom chunk size for multi-part uploads\r\n* `filesystem.settings.storage([success])` - returns current usage values\r\n* `filesystem.settings.registerFiletypes(options)` - adds mime and filetypes for use with reading/writing files\r\n* `filesystem.settings.getFiletypes()` - returns current filetype list\r\n\r\n**Support**\r\n\r\n* `filesystem.support.toArray(list)`* - convert an object to an array\r\n* `filesystem.support.listResults(entries, dir)`* - output the results of `filesystem.directory.read()` to the webpage\r\n* `filesystem.support.upload(dir, file, elem, [success, [failure]])`* - this method actually performs the upload, called by `filesystem.file.upload()`\r\n* `filesystem.support.multiPartUpload(dir, file, [success, [failure]])`* - if the file size is bigger than `filesystem.maxChunk` this function is called by ``filesystem.support.upload()`\r\n* `filesystem.support.dragOver(evt)`* - \r\n* `filesystem.support.drop(evt, dir, [success, [failure]])`* - \r\n* `filesystem.support.filetypeSearch(ext)`* - searches registered filetypes and returns the mime or false\r\n* `filesystem.support.roundTo(number, decimals)`* - rounds `number` to `decimals` decimal places\r\n* `filesystem.support.urlencode(str)`* - makes `str` URL-safe\r\n* `filesystem.support.urldecode(str)`* - decodes a URL-safe string `str`\r\n* `filesystem.support.ajax(type, address, data, [success, [failure,]] [responseType,] [requestHeaders])`* - performs AJAX calls\r\n* `filesystem.support.ab2str(buf)`* - converts ArrayBuffer `buf` into a string\r\n* `filesystem.support.str2ab(str)`* - converts string `str` into an ArrayBuffer\r\n\r\n**Extras** - not part of the `filesystem` object\r\n\r\n* `Array.prototype.forEach(fn, scope)`* - runs function `fn` for each item in the array\r\n* `Array.prototype.contains(term)`* - returns true if `term` is found, or false\r\n* `Array.prototype.find(term)`* - returns index of `term` if found, or false\r\n\r\n## To Do ##\r\n\r\n* Investigate any other methods that are needed/could be helpful\r\n\r\n## License ##\r\n\r\nAs usual with my work, this project is available under the BSD 3-Clause license. In short, you can do whatever you want with this code as long as:\r\n\r\n* I am always recognised as the original author.\r\n* I am not used to advertise any derivative works without prior permission.\r\n* You include a copy of said license and attribution with any and all redistributions of this code, including derivative works.\r\n\r\nFor more details, read the included [LICENSE.md](https://github.com/Ultrabenosaurus/HTML5FileSystem/blob/master/LICENSE.md) file or read about it on [opensource.org](http://opensource.org/licenses/BSD-3-Clause).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A JavaScript object to make interacting with the HTML5 FileSystem API super-easy!"}